{"version":3,"sources":["Time.js","App.js","AppGroup.js","index.js"],"names":["Time","props","state","time","Date","this","clock","setInterval","timeChange","clearInterval","setState","toUTCString","Component","App","selectType","Elm","style","color","border","backgroundColor","textAlgin","Feel","Belm","Relm","src","url","height","width","alt","theType","toString","AppGroup","maxNum","document","body","clientWidth","ReactDOM","render","display","alignItems","justifyContent","times","getElementById"],"mappings":"iTAiCeA,E,YA7Bb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,KAAM,IAAIC,MAHK,E,iFAQE,IAAD,OAClBC,KAAKC,MAAQC,aACX,kBAAM,EAAKC,eAAc,O,6CAK3BC,cAAcJ,KAAKC,S,mCAKnBD,KAAKK,SAAS,CAAEP,KAAM,IAAIC,S,+BAK1B,OAAO,6BAAMC,KAAKH,MAAMC,KAAKQ,mB,GA3BdC,aC8CJC,G,uLA1CX,OAAOR,KAAKS,e,mCAKZ,IAAIC,EAAM,wBAAIC,MAAO,CAACC,MAAM,QAASC,OAAQ,kBAAmBC,gBAAiB,QAASC,UAAW,WAA3F,eACNC,EAAO,sCACPC,EAAO,uCACPC,EAAO,yBAAKC,IAAKnB,KAAKJ,MAAMwB,IAAKC,OAAO,QAAQC,MAAM,QAAQC,IAAI,gBAGtE,OAAOvB,KAAKJ,MAAM4B,SAChB,IAAK,MACH,OACE,6BACE,4BAAKxB,KAAKJ,MAAM4B,QAAQC,YACvBf,EACD,kBAAC,EAAD,OAGN,IAAK,SACH,OACE,6BACGA,EACAQ,EACAR,GAIP,QACE,OACE,6BACGO,EACAC,EACAF,EACAC,Q,GArCKV,cCaHmB,E,iLAXX,OACE,6BACE,kBAAC,EAAD,CAAKF,QAAQ,QACb,kBAAC,EAAD,CAAKA,QAAQ,OAAOJ,IAAI,yBACxB,kBAAC,EAAD,CAAKI,QAAQ,QACb,kBAAC,EAAD,CAAKA,QAAQ,SAAQJ,IAAI,kC,GARVb,aCQjBoB,EAASC,SAASC,KAAKC,YAAc,IAI3CC,IAASC,OAAO,yBAAKrB,MARN,CAACsB,QAAS,OACVC,WAAY,SACZC,eAAgB,iBAIXR,EAAS,EAAIS,IAAM,GAAG,kBAAM,kBAAC,EAAD,SAAeA,IAAMT,GAAQ,kBAAM,kBAAC,EAAD,UAKzEC,SAASS,eAAe,e","file":"static/js/main.73fdfac4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Time extends Component {\n  //Constructor creates time value and starts update method\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: new Date()\n    };\n  }\n\n  //sets time to update every second\n  componentDidMount() {\n    this.clock = setInterval(\n      () => this.timeChange(), 1000\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.clock);\n  }\n\n  //updates time\n  timeChange() {\n    this.setState({ time: new Date() });\n  }\n\n  //Time component with time value that updates every second is rendered\n  render() {\n    return <div>{this.state.time.toUTCString()}</div>;\n  }\n}\n\nexport default Time;\n","import React, { Component } from 'react';\nimport Time from './Time';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return this.selectType();\n  }\n\n  selectType(){\n\n    let Elm = <h1 style={{color:'green', border: '3px solid black', backgroundColor: 'black', textAlgin: 'center'}}>Hello world</h1>;\n    let Feel = <h1>Let go</h1>;\n    let Belm = <h1>Be kind</h1>;\n    let Relm = <img src={this.props.url} height=\"200px\" width=\"200px\" alt=\"hello world\"></img>\n\n    //tests theType property passed in by creating object, then uses that to decide what type of App to return\n    switch(this.props.theType){\n      case \"Elm\":\n        return(\n          <div>\n            <h3>{this.props.theType.toString()}</h3>\n            {Elm}\n            <Time />\n          </div>\n        );\n      case \"Feelit\":\n        return (\n          <div>\n            {Elm}\n            {Relm}\n            {Elm}\n\n          </div>\n        );\n      default:\n        return (\n          <div>\n            {Belm}\n            {Relm}\n            {Feel}\n            {Belm}\n          </div>\n        );\n      }\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport App from './App';\n\nclass AppGroup extends Component {\n\n  render(){\n    return(\n      <div>\n        <App theType='Elm'/>\n        <App theType='Belm' url='images/lainlines.gif'/>\n        <App theType='Elm'/>\n        <App theType='Feelit'url='images/grid-glitch-a.gif'/>\n      </div>\n    );\n  }\n}\n\nexport default AppGroup;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport times from 'lodash/times';\nimport './index.css';\nimport AppGroup from './AppGroup';;\n//import * as serviceWorker from './serviceWorker';\n\nconst styles = {display: \"flex\",\n               alignItems: \"center\",\n               justifyContent: \"space-around\"};\n\nconst maxNum = document.body.clientWidth / 200;\n\nconst group = () => maxNum > 6 ? times(6, () => <AppGroup/>) : times(maxNum, () => <AppGroup/>);\n\nReactDOM.render(<div style={styles}>\n                  {group()}\n                </div>\n        , document.getElementById('helloDiv'));\n\n//Trading\n\n//serviceWorker.unregister();\n"],"sourceRoot":""}